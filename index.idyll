[meta title:"Effective Visualization of Hierarchies" description:"An introduction and discussion of indented charts and iclicle plots for effectively visualizing hierarchical data." /]

[data name:"hierarchy" source:"hierarchy.json" /]
[data name:"vis-config" source:"vis-config.json" /]

[Fixed]
  [^](#top)
[/Fixed]

[Header
  fullWidth:true
  title:"Effective Visualization of Hierarchies"
  subtitle:"Using Indented Charts and Icicle Plots"
  author:"Fabian Beck"
  date: "May 2022"
  authorLink:"https://github.com/fabian-beck"
   /]

[div className:"toc"]
  [Aside]
    #### Contents

    [ul]
      [li][Introduction](#introduction)[/li]
      [li][Indented Charts](#indented-charts)[/li]
      [li][Icicle Plots](#icicle-plots)[/li]
      [li][Discussion](#discussion)[/li]
      [li][Application Example](#application-example)[/li]
      [li][Conclusion](#conclusion)[/li]
      [li][Recommended Materials](#recommended-materials)[/li]
      [li][About](#about)[/li]
    [/ul]
  [/Aside]
[/div]

## Introduction

[Aside]
  An interactive article discussing two sometimes forgotten, but quite effective hierarchy visualization techniques.
[/Aside]

When it comes to visualizing hierarchically organized data, you often see [Annotation][Graphic]Nodes drawn as circles in layers and being connected by links[/Graphic]*node-link diagrams*[/Annotation] and [Annotation][Graphic]Recursively subdivided boxes[/Graphic]*treemaps*[/Annotation] promoted as the main types of diagrams. They are definitely interesting options, but two other techniques—sometimes forgotten—might be **the true workhorses of hierarchy visualization**: 

[p className:"centered"] **Indented Charts** [Inline][img src:"static/images/indented-icon.svg" className:"icon"/][/Inline] [span className:"v-space" /] and [span className:"v-space" /] **Icicle Plots** [Inline][img src:"static/images/icicle-icon.svg" className:"icon"/][/Inline][/p]

This interactive article presents these two types of hierarchy visualizations and discusses their characteristics in comparison with other visual representations. Trying to answer what makes such a visualization effective in practical application, we explore options for label placement, interactivity, and scaling the approach to larger datasets. 

## Indented Charts 

[Aside]
  Not even a visualization?
[/Aside]

[p className:"left"]
  [img src:"static/images/indented-icon.svg" className:"icon-large"/]
[/p]

So simple and known from file browsers and other user interfaces, indented charts might not even be considered a visualization, but just a user interface component like a list. Their characteristic feature is that the **elements of the hierarchy are vertically listed** below each other, with **increasing horizontal indentation per level**. Child elements directly follow their parents.

[var name:"scrollerIndex" value:0 /]
[Scroller currentStep:scrollerIndex]
  [Graphic style:`{width: 600, margin: 'auto'}`]
      [IndentedD3Component data:hierarchy config:vis-config index:scrollerIndex/]
  [/Graphic]

  [Step]
    ### Base Layout
    
    Let's visualize a simple hierarchy that shows a directory of files as an indented chart. Just the labels of the files and indentation is sufficient to see the hierarchical structure.
  [/Step]

  [Step]
    ### Hierarchy Levels
    
    Additional lines can mark the levels of the hierarchy and help trace which child nodes belong to a parent.
  [/Step]

  [Step]
    ### Visual Nodes
    
    We can also draw circles to get a graphical representation of each node.
  [/Step]

  [Step]
    ### Node Types
    
    These can be used, for instance, to visualize the type of the node as a color.
  [/Step]

  [Step]
    ### Node Size
    
    And, very useful for files, the area of the circles may encode the sizes of the respective files and directories.
  [/Step]

[/Scroller]

[Aside]
  A no-name visualization
[/Aside]

If you try to find more information on this representation, unfortunately, you will quickly learn that it does not have one name consistently name used in all sources, but different ones. I decided here to go for *indented chart* as it seems one of the most frequently used ones and is quite descriptive—other common names are *indented plot*, *indented layout*, *indented tree*, and *tree view*.

### Practical Use

The visualization is often used in file browsers, allowing users to interactively expand and collapse directories. Being collapsed at the beginning, even huge file structures can be interactively explored. Only rarely, additional numeric attributes are shown in such interfaces, but [TreeSize](https://www.jam-software.de/treesize_free) is an example that, similar to our example above, visualizes file sizes within the indented hierarchy. Also, [indentation of program code](https://en.wikipedia.org/wiki/Indentation_style) can be considered a variant of this, and many code editors visually indicate the levels by lines and allow for collapsing parts of the hierarchical program structure.

### Comparison to Node-Link Diagrams

[Aside]
  Yet another node-link layout?
[/Aside]

Generally, an indented chart can be considered a variant of node-link diagram, in a simple layout where all nodes are placed below each other. You may have notices that the list-like layout makes it straightforward to print labels for each node, and there is sufficient space for longer labels. In contrast, most other node-link layouts, though being slightly more compact, run into certain problems for placing labels. Especially difficult to label are those that use a radial layout, also because rotated texts gets more difficult to read for increasing rotation angles.

[p className:"centered"] 
  [p className:"left"]
    [img src:"static/images/indented-icon.svg" className:"icon-large"/]
  [/p]
  
  ### Insight

  **Indented charts** are simple to implement, known by every user, allow for interactive exploration of large hierarchies, and do not cause issues when printing labels. 
[/p]

## Icicle Plots

[Aside]
  Size matters!
[/Aside]

[p className:"left"]
  [img src:"static/images/icicle-icon.svg" className:"icon-large"/]
[/p]

In contrast to indented charts, an icicle plot focuses more on providing a good overview of the sizes of the hierarchy nodes. In this regard, it is similar to a treemap where the size of the nodes is encoded in the rectangular area they fill. But instead of nesting the nodes, the icicle plots just **start with a full-width rectangle and attach the child nodes below their parent as a rectangle scaled according to their sizes**. 

[var name:"scrollerIndex2" value:0 /]
[Scroller currentStep:scrollerIndex2]
  [Graphic style:`{maxWidth: 600, margin: "auto", padding: 10}`]
      [IcicleD3Component data:hierarchy config:vis-config index:scrollerIndex2/]
  [/Graphic]

  [Step]
    ### Base Layout
    
   Yet, let's first ignore the sizes—assume all files in our example have the same size. In the resulting base layout, the root node is placed at the top width full width. The level below subdivided into the respective directories and files in a way that the directories consume a width proportional to the number of contained files. And so on, this is done for the next levels.
  [/Step]

  [Step]
    ### Node Types
    
   We already encode the levels of the hierarchy as slightly decreasing opacity, but again, we can also use colors to discern the different types of files.
  [/Step]

  [Step]
    ### Node Sizes
    
    And finally, the nodes can be scaled according to the respective file sizes. As a consequence, the widths of directory nodes also adapt and match the summed sizes of the contained files.
  [/Step]

[/Scroller]

[Aside]
  Icicles, flames, and sunbursts
[/Aside]

From a distance, these vertically appended rectangles somewhat resemble hanging icicles. If arrange from bottom to top instead (and colored in red-orange colors), they more look like flames and are sometimes called *flame graphs*, respectively. Radial variants usually go under the term *sunburst* (see below).

### Practical Use

[Aside]
  Label or no label?
[/Aside]

You might have noticed that placing the labels is sometimes tricky in an icicle plot. For bigger nodes, there is usually enough space to print the full label. But for smaller ones, they need to be cut or cannot be printed at all. However, depending on the application, this might not be a bigger issue if size corresponds to importance. For instance, investigating which files consume most space on our hard disk, we would not be interested in the files and their names anyway.

[Aside]
  Size + size = size
[/Aside]

For file sizes, the division of rectangle in the plot works nicely is intuitive to understand, as the sum of the sizes of the child nodes is the size of the parent. If this property does not hold, however, the encoding might not recommendable. For instance, if the parent node can have a size that is independent of its child nodes, it does not make sense to use an icicle plot. Or, even if the sizes are on a log scale, the sum of the sizes of the children would no longer be the size of the parent. Hence, we have to be careful to not blindly use any numeric attribute as the values encoded in an icicle plot.

[Aside]
  Zooming in
[/Aside]

...

### Sunburst Charts

[Aside]
  Admittedly, the radial **sunburst** variant looks nice ...
[/Aside]

The radial variant of an icicle plot, often called *sunburst chart*, has slightly different properties. Here, the root is a circle in the center and all child nodes are ring segments at the respective level. The below diagram shows the above file system example drawn as a sunburst chart with radially placed labels.

[SunburstD3Component data:hierarchy config:vis-config index:scrollerIndex2/]

[Aside]
  ... but is it better?
[/Aside]

The nodes are subdivided not by width but by angle. This results in nodes towards the center being disproportionately smaller. However, interpreting each ring at a level as 100% of a quantity, the relative sizes are interpretable, somewhat like in a [pie chart](https://en.wikipedia.org/wiki/Pie_chart) where the full pie usually also represents 100%. Hence, node sizes are comparable within a level, but not across levels—angles might be harder to compare. Labeling, like usual in radial visualizations, becomes also more challenging; however, more space is available for the outer nodes at deeper levels of the hierarchy. Overall, I would still recommend the standard icicle plot as default, but also besides the aesthetics, there are reasons why in some cases a sunburst chart might be preferred.

### Comparison to Treempas

... like a treemap, icicle plots are sometimes characterized as *space-filling*—they can fill any rectangular space. While this is perfectly true for treemaps, an icicle plot would leave still some whitespace (if not all leaf nodes are on the same hierarchy level).

[p className:"centered"] 
  [p className:"left"]
    [img src:"static/images/icicle-icon.svg" className:"icon-large"/]
  [/p]
  
  ### Insight

  **Icicle plots** (and **sunburst charts**) are great to clearly visualize a linear size attribute of the nodes; maybe not known to every user already, they are not difficult to understand either.
[/p]

## Research Findings

### Empirical Results

### Extended Versions

## Application Example

## Conclusion

## Recommended Materials

* [Treevis.net: A Visual Bibliography of Tree Visualization](https://treevis.net)
* [d3-hierarchy: 2D layout algorithms for visualizing hierarchical data (D3js)](https://github.com/d3/d3-hierarchy)

## About

* This article was created using [Idyll](https://idyll-lang.org) and [D3.js](https://d3js.org/).
* The source code is available on [GitHub](https://github.com/vis-uni-bamberg/hierarchy-vis) under MIT license.
